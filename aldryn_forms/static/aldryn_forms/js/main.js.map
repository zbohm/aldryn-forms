{"version":3,"sources":["webpack://aldryn-forms/./aldryn_forms/static/aldryn_forms/js/src/form.js","webpack://aldryn-forms/./aldryn_forms/static/aldryn_forms/js/src/main.js"],"names":["populate","text","obj","key","value","Object","entries","pattern","RegExp","replace","handleFormRequiredCheckbox","event","form","target","closest","element","querySelectorAll","parentNode","removeChild","button","disabled","readOnly","handleFormSubmit","blur","this","requiredFieldsFulfilled","checkboxset","getElementsByClassName","chosen","length","parseInt","dataset","required_min","insertAdjacentHTML","gettext","preventDefault","window","document","addEventListener","getElementsByTagName","classList","contains"],"mappings":"mBAOA,SAASA,EAASC,EAAMC,GAEpB,IAAK,MAAOC,EAAKC,KAAUC,OAAOC,QAAQJ,GAAM,CAC5C,MAAMK,EAAU,IAAIC,OAAO,OAAOL,QAAW,KAC7CF,EAAOA,EAAKQ,QAAQF,EAASH,GAEjC,OAAOH,EAIJ,SAASS,EAA2BC,GAEvC,MAAMC,EAAOD,EAAME,OAAOC,QAAQ,QAClC,GAAIF,EAAM,CAEN,IAAK,MAAMG,KAAWH,EAAKI,iBAAiB,wDACxCD,EAAQE,WAAWC,YAAYH,GAGnC,IAAK,MAAMI,KAAUP,EAAKI,iBAAiB,iBACvCG,EAAOC,UAAW,EAClBD,EAAOE,UAAW,GAKvB,SAASC,EAAiBX,GAE7BA,EAAME,OAAOU,OACb,IAAK,MAAMJ,KAAUK,KAAKR,iBAAiB,iBACvCG,EAAOC,UAAW,EAClBD,EAAOE,UAAW,EAGtB,IAAII,GAA0B,EAC9B,IAAK,MAAMC,KAAeF,KAAKG,uBAAuB,iBAAkB,CACpE,MAAMC,EAASF,EAAYV,iBAAiB,gCAAgCa,OACxED,EAASE,SAASJ,EAAYK,QAAQC,gBACtCP,GAA0B,EAC1BC,EAAYO,mBACR,WACA,mEACEjC,EAASkC,QAAQ,sEAAuE,CACtF9B,MAAOsB,EAAYK,QAAQC,aAAcJ,OAAQA,IACnD,WAId,GAAIH,EAEA,IAAK,MAAMN,KAAUK,KAAKR,iBAAiB,iBACvCG,EAAOc,mBACH,WACA,iEACEC,QAAQ,mCACR,cAEP,CAEHvB,EAAMwB,iBACN,IAAK,MAAMhB,KAAUK,KAAKR,iBAAiB,iBACvCG,EAAOc,mBACH,WAAY,iEACVC,QAAQ,qCAAuC,WAnE1C,mBAAZA,UACPE,OAAOF,QAAUjC,GAAQA,GCD7BoC,SAASC,iBAAiB,oBAAoB,KAG1C,IAAK,MAAM1B,KAAQyB,SAASE,qBAAqB,QAExC3B,EAAK4B,UAAUC,SAAS,wBACzB7B,EAAK0B,iBAAiB,SAAUhB,GAIxC,IAAK,MAAMP,KAAWsB,SAASrB,iBAAiB,uCAC5CD,EAAQuB,iBAAiB,QAAS5B,O","file":"main.js","sourcesContent":["/* global gettext */\n\n// Prevent a situation when the translation is not implemented.\nif (typeof gettext !== \"function\") {\n    window.gettext = text => text\n}\n\nfunction populate(text, obj) {\n    // Map values to the text. E.g. \"Text %(value)s.\"\n    for (const [key, value] of Object.entries(obj)) {\n        const pattern = new RegExp(`%\\\\(${key}\\\\)s`, 'g')\n        text = text.replace(pattern, value)\n    }\n    return text\n}\n\n\nexport function handleFormRequiredCheckbox(event) {\n    // The event.target is a checkbox - this is the result of selector: .form-required input[type=checkbox]\n    const form = event.target.closest(\"form\")\n    if (form) {\n        // Remove error messages if there are any.\n        for (const element of form.querySelectorAll(\".aldryn-forms-required-msg, .aldryn-forms-submit-msg\")) {\n            element.parentNode.removeChild(element)\n        }\n        // Enable submit button.\n        for (const button of form.querySelectorAll('[type=submit]')) {\n            button.disabled = false\n            button.readOnly = false\n        }\n    }\n}\n\nexport function handleFormSubmit(event) {\n    // Disable button submit to prevent user click more than once.\n    event.target.blur()\n    for (const button of this.querySelectorAll('[type=submit]')) {\n        button.disabled = true\n        button.readOnly = true\n    }\n\n    let requiredFieldsFulfilled = true\n    for (const checkboxset of this.getElementsByClassName(\"form-required\")) {\n        const chosen = checkboxset.querySelectorAll(\"input[type=checkbox]:checked\").length\n        if (chosen < parseInt(checkboxset.dataset.required_min)) {\n            requiredFieldsFulfilled = false\n            checkboxset.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-required-msg\">'\n                + populate(gettext(\"You have to choose at least %(value)s options (chosen %(chosen)s).\"), {\n                    value: checkboxset.dataset.required_min, chosen: chosen})\n                + '</div>')\n        }\n    }\n    // Do not submit the form if any required fields are missing.\n    if (requiredFieldsFulfilled) {\n        // Display a message to inform the user that the form has been submitted.\n        for (const button of this.querySelectorAll('[type=submit]')) {\n            button.insertAdjacentHTML(\n                'afterend',\n                '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n                + gettext(\"Please wait. Submitting form...\")\n                + '</div>')\n        }\n    } else {\n        // Some required value is not set.\n        event.preventDefault()\n        for (const button of this.querySelectorAll('[type=submit]')) {\n            button.insertAdjacentHTML(\n                'afterend', '<div class=\"text-danger aldryn-forms aldryn-forms-submit-msg\">'\n                + gettext(\"Correct the errors first, please.\") + '</div>')\n        }\n    }\n}\n","import {handleFormSubmit, handleFormRequiredCheckbox} from './form'\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Disable button submit to prevent user click more than once.\n    // Do not submit the form if any required fields are missing.\n    for (const form of document.getElementsByTagName(\"form\")) {\n        // Skip forms with class skip-disable-submit.\n        if (!form.classList.contains(\"skip-disable-submit\")) {\n            form.addEventListener('submit', handleFormSubmit)\n        }\n    }\n    // Enable submit button if required were set.\n    for (const element of document.querySelectorAll(\".form-required input[type=checkbox]\")) {\n        element.addEventListener('click', handleFormRequiredCheckbox)\n    }\n})\n"],"sourceRoot":""}